<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

    <!-- 애너테이션 기반 스프링 빈 등록을 위한 컴포넌트 스캔 -->
    <context:component-scan base-package="net.homeplus.offline">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!-- 프록시 기반 AOP 등록 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

	<mvc:default-servlet-handler/>

    <mvc:annotation-driven />

    <!-- json View 빈 -->
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >
        <property name="extractValueFromSingleKeyModel" value="true"/>
    </bean>

    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="1" />
    </bean>

	<!--  tiles viewResolver -->
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="2" />
	</bean>

	<!--  tiles configuration -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<value>
				/WEB-INF/**/tiles.xml,/WEB-INF/**/bs-tiles.xml
			</value>
		</property>
		<property name="preparerFactoryClass"
				  value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" />
	</bean>

    <!-- 컨텐츠 네고시에이팅 뷰 리졸버 설정 -->
    <!-- 요청의 확장자, 헤더 타입 등을 기준으로 렌더링할 뷰를 결정해준다. -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="3" />
        <property name="parameterName" value="format" />
        <property name="ignoreAcceptHeader" value="false" />

        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManager">
                <constructor-arg>
                    <list>
                        <bean class="org.springframework.web.accept.PathExtensionContentNegotiationStrategy">
                            <constructor-arg>
                                <map>
                                    <entry key="html" value="text/html" />
                                    <entry key="json" value="application/json" />
                                </map>
                            </constructor-arg>
                        </bean>
                        <bean class="org.springframework.web.accept.ParameterContentNegotiationStrategy">
                            <constructor-arg>
                                <map>
                                    <entry key="html" value="text/html" />
                                    <entry key="json" value="application/json" />
                                </map>
                            </constructor-arg>
                        </bean>
                    </list>
                </constructor-arg>
            </bean>
        </property>

        <property name="defaultViews">
            <list>
                <ref bean="jsonView" />
            </list>
        </property>
    </bean>

    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="4" />
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
    </bean>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
        <property name="order" value="5" />
    </bean>

    <!-- swagger 컨트롤러 싱글톤 : API DOC 을 자동생성한다.-->
    <context:component-scan base-package="com.mangofactory.swagger.spring.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 파일 업로드 테스트 관련 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="2000000"/>
        <property name="uploadTempDir" ref="fileSystemResource"/>
    </bean>

    <!-- 일시 파일 업로드 경로 -->
    <bean id="fileSystemResource" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg>
            <value>c:/temp/</value>
        </constructor-arg>
    </bean>

	<!-- Locale Resolver : ko_KR -->
	<bean id="localeKO" class="java.util.Locale" >
	    <constructor-arg type="java.lang.String" value="ko" />
	    <constructor-arg type="java.lang.String" value="KR" />
	</bean>
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver"> 
	    <constructor-arg type="java.util.Locale" ref="localeKO" />
	</bean>
</beans>