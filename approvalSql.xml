<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Approval">

<select id="selectSRApprovalRule" parameterType="ApprovalRuleVO" resultType="ApprovalRuleVO">

SELECT TAR.APRV_RULE_ID
     , TAR.APRV_RULE_SEQ
     , TAR.SR_TYPE_ID
     , TAR.SYS_ID
     , TAR.APRV_TYPE
     , TU.DEPT_ID
     , TD.DEPT_NM AS aprvDeptNm
     , TAR.APRV_EMP_ID 
     , TU.USER_NM  as aprvEmpNm 
     , TU.EMAIL as aprvEmpEmail
     , TU.JOB_TITLE as aprvEmpJobTitle
     , TAR.APRV_DESC
FROM   TB_APPROVAL_RULE TAR
       LEFT OUTER JOIN TB_USER TU
       ON TAR.APRV_EMP_ID = TU.USER_ID
       LEFT OUTER JOIN TB_DEPT TD
       ON TU.DEPT_ID = TD.DEPT_ID
WHERE  SR_TYPE_ID = 'TEMP'
AND    SYS_ID = #{sysId}
AND    USE_YN = 'Y'

</select>
	
	
<insert id="insertAprovalHist" parameterType="ApprovalHistVO">
	
INSERT INTO TB_APPROVAL_HIST
(
       SR_ID
     , APRV_SEQ
     , APRV_TP_CD
     , APRV_EMP_ID
     , APRV_STATUS
     , MAIL_SEND_YN
     , CRT_ID
     , CRT_DTTM
     , ORG_APRV_EMP_ID
) 
SELECT
       #{srId}
     , (SELECT COUNT (*) + 1
        FROM   TB_APPROVAL_HIST
        WHERE  SR_ID = #{srId}
       ) 	
     , #{aprvTpCd}
     , COALESCE( MAX(ALTER_EMP_ID), #{aprvEmpId} )
     , #{aprvStatus}
     , #{mailSendYn, jdbcType=VARCHAR}
     , 'SYSTEM'
     , CURRENT TIMESTAMP
     , CASE WHEN MAX(ALTER_EMP_ID) IS NULL
            THEN NULL
            ELSE CAST(#{aprvEmpId} AS VARCHAR(100))
       END     
FROM   TB_ALTERNATE 
WHERE USER_ID = #{aprvEmpId}

</insert>


<select id = "selectNextApprovalInfo" parameterType="String" resultType="ApprovalHistVO">
<![CDATA[
SELECT SR_ID
     , APRV_SEQ
     , APRV_TP_CD
     , APRV_EMP_ID
     , APRV_STATUS
     , MAIL_SEND_YN
     , APRV_DTTM 
FROM   TB_APPROVAL_HIST
WHERE  SR_ID = #{srId}
AND    APRV_STATUS != 'COMPLETE' 
ORDER BY APRV_SEQ
FETCH FIRST 1 ROWS ONLY
]]>
</select>	


<insert id="insertAlternative" parameterType="AlternativeVO">

INSERT INTO TB_ALTERNATE
(
       USER_ID
     , ALTER_EMP_ID
     , ALTER_EMP_NM
     , EMAIL
     , CRT_ID
     , CRT_DTTM
) 
VALUES 
(      
       #{userId}
     , #{alterEmpId}
     , null
     , null
     , null
     , CURRENT TIMESTAMP
)

</insert>


<select id = "selectAlternative" parameterType="AlternativeVO" resultType="AlternativeVO">
SELECT 
       TA.USER_ID
     , TA.ALTER_EMP_ID
     , TU.USER_NM  as alterEmpNm
     , TU.DEPT_ID as alterDeptId
     , TD.DEPT_NM as alterDeptNM
     , TU.EMAIL   as alterEmpEmail
	 , TU.JOB_TITLE as alterEmpJobTitle
FROM   TB_ALTERNATE TA
       LEFT  OUTER JOIN TB_USER TU
       ON TA.ALTER_EMP_ID = TU.USER_ID
       LEFT OUTER JOIN TB_DEPT TD
       ON TU.DEPT_ID = TD.DEPT_ID
WHERE  TA.USER_ID = #{userId}
</select>


<delete id="deleteAlternative" parameterType="AlternativeVO">

DELETE 
FROM  TB_ALTERNATE 
WHERE USER_ID = #{userId}

</delete>


<update id="updateApprovalHistStatus" parameterType="ApprovalHistVO">

UPDATE TB_APPROVAL_HIST 
SET    APRV_STATUS = #{aprvStatus}
<if test="mailSendYn != null and mailSendYn != ''">
     , MAIL_SEND_YN = #{mailSendYn} 
</if>
<if test="aprvCnts != null and aprvCnts != ''">
     , APRV_CNTS = #{aprvCnts} 
</if>
     , 	APRV_DTTM = CURRENT TIMESTAMP
     , LAST_MOD_DTTM = CURRENT TIMESTAMP
WHERE  SR_ID = #{srId}
AND    APRV_SEQ = #{aprvSeq}
</update>


<update id="rejectAllApprovalHist" parameterType="ApprovalHistVO">

UPDATE TB_APPROVAL_HIST 
SET    APRV_STATUS = 'REJECT'
     , APRV_DTTM = CURRENT TIMESTAMP
     , LAST_MOD_DTTM = CURRENT TIMESTAMP
WHERE  SR_ID = #{srId}
AND    APRV_SEQ > #{aprvSeq}
</update>

<update id="cancelApproval" parameterType="String">

UPDATE TB_APPROVAL_HIST 
SET    APRV_STATUS = 'CANCEL'
     , APRV_DTTM = CURRENT TIMESTAMP
     , LAST_MOD_DTTM = CURRENT TIMESTAMP
WHERE  SR_ID = #{srId}
</update>



<update id="updateApprovalHistToAlternative" parameterType="AlternativeVO">

UPDATE TB_APPROVAL_HIST 
SET    ORG_APRV_EMP_ID = APRV_EMP_ID
     , APRV_EMP_ID = #{alterEmpId}
     , LAST_MOD_DTTM = CURRENT TIMESTAMP
WHERE  APRV_EMP_ID = #{userId}
AND    APRV_STATUS NOT IN ('COMPLETE', 'REJECT')
</update>


<update id="restoreApprovalHistToOrgin" parameterType="AlternativeVO">

UPDATE TB_APPROVAL_HIST 
SET    APRV_EMP_ID = ORG_APRV_EMP_ID
     , ORG_APRV_EMP_ID = null
     , LAST_MOD_DTTM = CURRENT TIMESTAMP
WHERE  ORG_APRV_EMP_ID = #{userId}
AND    APRV_STATUS NOT IN ('COMPLETE', 'REJECT')

</update>


<select id = "selectSRApprovalHistListBySRId" parameterType="String" resultType="ApprovalHistVO">

SELECT TAH.SR_ID
     , TAH.APRV_SEQ
     , TAH.APRV_TP_CD
     , TU.DEPT_ID
     , TD.DEPT_NM as aprvDeptNm
     , TAH.APRV_EMP_ID
     , TU.USER_NM as aprvEmpNm
     , TU.JOB_TITLE as aprvEmpJobTitle
     , TAH.APRV_STATUS
     , TCD.CD_NM as aprvStatusNm
     , TAH.MAIL_SEND_YN
     , TAH.CRT_ID
     , TAH.CRT_DTTM
     , TAH.LAST_MOD_ID
     , TAH.LAST_MOD_DTTM
     , TAH.APRV_DTTM
     , TAH.APRV_CNTS
     , TAH.ORG_APRV_EMP_ID
FROM   TB_APPROVAL_HIST TAH
       LEFT OUTER JOIN TB_USER TU
       ON TAH.APRV_EMP_ID = TU.USER_ID
       LEFT OUTER JOIN TB_DEPT TD
       ON TU.DEPT_ID = TD.DEPT_ID
       LEFT OUTER JOIN TB_COMM_DETAIL TCD
       ON TAH.APRV_STATUS = TCD.CD_ID AND TCD.CD_GRP_ID = 'APS'
WHERE  TAH.SR_ID = #{srId}
AND    TAH.APRV_TP_CD != 'DRAFT'
ORDER  BY TAH.APRV_SEQ

</select>


<select id="selectIndividualApprovalLine" parameterType="String" resultType="IndividualApprovalLineVO">
SELECT 
       TAI.USER_ID
     , TAI.APRV_INDIV_SEQ
     , TU.DEPT_ID 
     , TD.DEPT_NM AS aprvDeptNm
     , TAI.APRV_EMP_ID 
     , TU.USER_NM  as aprvEmpNm 
     , TU.EMAIL as aprvEmpEmail
     , TU.JOB_TITLE as aprvEmpJobTitle
FROM   TB_APPROVAL_INDIV TAI
       LEFT OUTER JOIN TB_USER TU
       ON TAI.APRV_EMP_ID = TU.USER_ID
       LEFT OUTER JOIN TB_DEPT TD
       ON TU.DEPT_ID = TD.DEPT_ID
WHERE  TAI.USER_ID = #{userId}
</select>



<delete id="deleteIndividualApprovalLine" parameterType="String" >
DELETE 
FROM   TB_APPROVAL_INDIV 
WHERE  USER_ID = #{userId}
</delete>


<insert id="insertIndividualApprovalLine" parameterType="IndividualApprovalLineVO">

INSERT INTO TB_APPROVAL_INDIV
(      USER_ID
     , APRV_INDIV_SEQ
     , APRV_EMP_ID
)
VALUES 
(      #{userId}
     , (SELECT COUNT (*) + 1
        FROM   TB_APPROVAL_INDIV
        WHERE  USER_ID = #{userId}
       )
     , #{aprvEmpId}
)

</insert>



<delete id="deleteITApprovalLine" parameterType="SRViewVO">

DELETE 
FROM  TB_APPROVAL_HIST 
WHERE SR_ID = #{srId}
AND   APRV_TP_CD = 'ITDEPT'

</delete>


<insert id="insertITApprovalLine" parameterType="SRViewVO">

INSERT INTO TB_APPROVAL_HIST
(
       SR_ID
     , APRV_SEQ
     , APRV_TP_CD
     , APRV_EMP_ID
     , APRV_STATUS
     , MAIL_SEND_YN
     , CRT_ID
     , CRT_DTTM
     , ORG_APRV_EMP_ID
)
SELECT 
       #{srId}
     , (SELECT COUNT (*) + 1
        FROM   TB_APPROVAL_HIST
        WHERE  SR_ID = #{srId}
       ) + ROW_NUMBER() OVER(ORDER BY TAR.APRV_RULE_ID)
     , 'ITDEPT'
     , CASE WHEN TA.ALTER_EMP_ID IS NOT NULL
            THEN TA.ALTER_EMP_ID
            ELSE TAR.APRV_EMP_ID
       END
     , 'WAITING'
     , 'N'
     , 'SYSTEM'
     , CURRENT TIMESTAMP
     , CASE WHEN TA.ALTER_EMP_ID IS NULL
            THEN NULL
            ELSE TAR.APRV_EMP_ID
       END 
FROM  TB_APPROVAL_RULE TAR
      LEFT OUTER JOIN TB_ALTERNATE TA
      ON TAR.APRV_EMP_ID = TA.USER_ID
WHERE SR_TYPE_ID = 'TEMP'
AND   SYS_ID = #{sysId}
</insert>

	
</mapper>